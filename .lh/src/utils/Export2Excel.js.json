{
    "sourceFile": "src/utils/Export2Excel.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1698477499339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1698479603474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,15 @@\n }\r\n \r\n export const export_json_to_excel = ({\r\n   multiHeader = [],\r\n+  // 表头\r\n   header,\r\n+  // 数据\r\n   data,\r\n+  // 文件名\r\n   filename,\r\n+  // \r\n   merges = [],\r\n   autoWidth = true,\r\n   bookType = 'xlsx'\r\n } = {}) => {\r\n"
                },
                {
                    "date": 1698479654782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,11 +70,13 @@\n   // 数据\r\n   data,\r\n   // 文件名\r\n   filename,\r\n-  // \r\n+  //\r\n   merges = [],\r\n+  // 是否自动列宽\r\n   autoWidth = true,\r\n+  // 文件类型\r\n   bookType = 'xlsx'\r\n } = {}) => {\r\n   // 1. 设置文件名称\r\n   filename = filename || 'excel-list'\r\n"
                },
                {
                    "date": 1698480103881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n /* eslint-disable */\r\n import { saveAs } from 'file-saver'\r\n-import XLSX from 'xlsx'\r\n+import * as XLSX from 'xlsx'\r\n \r\n function datenum(v, date1904) {\r\n   if (date1904) v += 1462\r\n   var epoch = Date.parse(v)\r\n"
                },
                {
                    "date": 1698480285644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n /* eslint-disable */\r\n import { saveAs } from 'file-saver'\r\n-import * as XLSX from 'xlsx'\r\n+import * as XLSX from 'xlsx/xlsx.mjs'\r\n \r\n function datenum(v, date1904) {\r\n   if (date1904) v += 1462\r\n   var epoch = Date.parse(v)\r\n"
                }
            ],
            "date": 1698477499339,
            "name": "Commit-0",
            "content": "/* eslint-disable */\r\nimport { saveAs } from 'file-saver'\r\nimport XLSX from 'xlsx'\r\n\r\nfunction datenum(v, date1904) {\r\n  if (date1904) v += 1462\r\n  var epoch = Date.parse(v)\r\n  return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000)\r\n}\r\n\r\nfunction sheet_from_array_of_arrays(data, opts) {\r\n  var ws = {}\r\n  var range = {\r\n    s: {\r\n      c: 10000000,\r\n      r: 10000000\r\n    },\r\n    e: {\r\n      c: 0,\r\n      r: 0\r\n    }\r\n  }\r\n  for (var R = 0; R != data.length; ++R) {\r\n    for (var C = 0; C != data[R].length; ++C) {\r\n      if (range.s.r > R) range.s.r = R\r\n      if (range.s.c > C) range.s.c = C\r\n      if (range.e.r < R) range.e.r = R\r\n      if (range.e.c < C) range.e.c = C\r\n      var cell = {\r\n        v: data[R][C]\r\n      }\r\n      if (cell.v == null) continue\r\n      var cell_ref = XLSX.utils.encode_cell({\r\n        c: C,\r\n        r: R\r\n      })\r\n\r\n      if (typeof cell.v === 'number') cell.t = 'n'\r\n      else if (typeof cell.v === 'boolean') cell.t = 'b'\r\n      else if (cell.v instanceof Date) {\r\n        cell.t = 'n'\r\n        cell.z = XLSX.SSF._table[14]\r\n        cell.v = datenum(cell.v)\r\n      } else cell.t = 's'\r\n\r\n      ws[cell_ref] = cell\r\n    }\r\n  }\r\n  if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range)\r\n  return ws\r\n}\r\n\r\nfunction Workbook() {\r\n  if (!(this instanceof Workbook)) return new Workbook()\r\n  this.SheetNames = []\r\n  this.Sheets = {}\r\n}\r\n\r\nfunction s2ab(s) {\r\n  var buf = new ArrayBuffer(s.length)\r\n  var view = new Uint8Array(buf)\r\n  for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xff\r\n  return buf\r\n}\r\n\r\nexport const export_json_to_excel = ({\r\n  multiHeader = [],\r\n  header,\r\n  data,\r\n  filename,\r\n  merges = [],\r\n  autoWidth = true,\r\n  bookType = 'xlsx'\r\n} = {}) => {\r\n  // 1. 设置文件名称\r\n  filename = filename || 'excel-list'\r\n  // 2. 把数据解析为数组，并把表头添加到数组的头部\r\n  data = [...data]\r\n  data.unshift(header)\r\n  // 3. 解析多表头，把多表头的数据添加到数组头部（二维数组）\r\n  for (let i = multiHeader.length - 1; i > -1; i--) {\r\n    data.unshift(multiHeader[i])\r\n  }\r\n  // 4. 设置 Excel 表工作簿（第一张表格）名称\r\n  var ws_name = 'SheetJS'\r\n  // 5. 生成工作簿对象\r\n  var wb = new Workbook()\r\n  // 6. 将 data 数组（json格式）转化为 Excel 数据格式\r\n  var ws = sheet_from_array_of_arrays(data)\r\n  // 7. 合并单元格相关（['A1:A2', 'B1:D1', 'E1:E2']）\r\n  if (merges.length > 0) {\r\n    if (!ws['!merges']) ws['!merges'] = []\r\n    merges.forEach((item) => {\r\n      ws['!merges'].push(XLSX.utils.decode_range(item))\r\n    })\r\n  }\r\n  // 8. 单元格宽度相关\r\n  if (autoWidth) {\r\n    /*设置 worksheet 每列的最大宽度*/\r\n    const colWidth = data.map((row) =>\r\n      row.map((val) => {\r\n        /*先判断是否为null/undefined*/\r\n        if (val == null) {\r\n          return {\r\n            wch: 10\r\n          }\r\n        } else if (val.toString().charCodeAt(0) > 255) {\r\n          /*再判断是否为中文*/\r\n          return {\r\n            wch: val.toString().length * 2\r\n          }\r\n        } else {\r\n          return {\r\n            wch: val.toString().length\r\n          }\r\n        }\r\n      })\r\n    )\r\n    /*以第一行为初始值*/\r\n    let result = colWidth[0]\r\n    for (let i = 1; i < colWidth.length; i++) {\r\n      for (let j = 0; j < colWidth[i].length; j++) {\r\n        if (result[j]['wch'] < colWidth[i][j]['wch']) {\r\n          result[j]['wch'] = colWidth[i][j]['wch']\r\n        }\r\n      }\r\n    }\r\n    ws['!cols'] = result\r\n  }\r\n\r\n  // 9. 添加工作表（解析后的 excel 数据）到工作簿\r\n  wb.SheetNames.push(ws_name)\r\n  wb.Sheets[ws_name] = ws\r\n  // 10. 写入数据\r\n  var wbout = XLSX.write(wb, {\r\n    bookType: bookType,\r\n    bookSST: false,\r\n    type: 'binary'\r\n  })\r\n  // 11. 下载数据\r\n  saveAs(\r\n    new Blob([s2ab(wbout)], {\r\n      type: 'application/octet-stream'\r\n    }),\r\n    `${filename}.${bookType}`\r\n  )\r\n}\r\n"
        }
    ]
}